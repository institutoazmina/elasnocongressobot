import csv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import pandas as pd
from gspread_dataframe import set_with_dataframe
import os
from dotenv import load_dotenv

"""
Script that syncs the spreadsheet maintained on the Google Drive
with the spreadsheets generated by the spiders.
"""

"Dotenv is used to get the Google spreadsheets names and the Google API JSON key."
load_dotenv()

"Use creds to create a client to interact with the Google Drive API"
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    os.getenv("GOOGLE_JSON_KEY"), scope
)
client = gspread.authorize(creds)

"""
Find a workbook by name and open the first and second sheet
Make sure you use the right names here.
"""
"0 refers to first sheet"
sheet_camara = client.open(os.getenv("SPREADSHEET_NAME")).get_worksheet(0)
"1 refers to second sheet"
sheet_senado = client.open(os.getenv("SPREADSHEET_NAME")).get_worksheet(1)

cols_camara = [
    "id",
    "urlTramitacao",
    "dataDaTramitacao",
    "horaDaTramitacao",
    "nomeDoProjeto",
    "autor",
    "cargo",
    "descricaoTipo",
    "descricaoSituacao",
    "descricaoTramitacao",
    "despacho",
    "ementa",
    "codTipo",
    "ementaDetalhada",
    "keywords",
    "uriPropPrincipal",
    "uriPropAnterior",
    "uriPropPosterior",
    "urlInteiroTeor",
    "urnFinal",
    "texto",
    "justificativa",
    "dataApresentacao",
    "horaApresentacao",
    "sequencia",
    "siglaOrgao",
    "uriOrgao",
    "uriUltimoRelator",
    "regime",
    "uriOrgaoNumerador",
    "codTipoTramitacao",
    "uriAutores",
    "codSituacao",
    "despacho",
    "url",
    "ambito",
    "apreciacao",
    "temas",
    "tema_1",
    "tema_2",
    "sexo",
    "partido"
]

cols_senado = [
    "CodigoMateria",
    "UrlTramitacao",
    "DataDaTramitação",
    "HoraDaTramitação",
    "NomedoProjeto",
    "Autor",
    "MovimentacaoDescricaoSituacao",
    "MovimentacaoDescricao",
    "Ementa",
    "NumeroMateria",
    "AnoMateria",
    "IdentificacaoProcesso",
    "IndicadorTramitando",
    "DataApresentacao",
    "SiglaCasaIdentificacaoMateria",
    "NomeCasaIdentificacaoMateria",
    "SiglaSubtipoMateria",
    "temas",
    "ApelidoMateria",
    "CasaIniciadoraNoLegislativo",
    "NumeroRepublicacaoMpv",
    "IndicadorComplementar",
    "DataAssinatura",
    "AssuntoEspecificoCod",
    "AssuntoEspecificoDesc",
    "AssuntoGeralCod",
    "AssuntoGeralDesc",
    "tema_1",
    "tema_2",
    "AutorSexo",
    "AutorPartido"
]


def read_csv(file_name):
    "Read the CSV"
    with open(file_name, newline="") as f:
        return list(csv.reader(f))


def write_csv(file_name, rows):
    "Write data to the CSV"
    with open(file_name, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerows(rows)


def update_csv(input_file, existing_file):
    """
    This function reads the already existing result CSV
    compares rows with the new output CSV and then removes duplicates
    and, finally, writes the new result CSV.
    """
    input_rows = read_csv(input_file)

    """"
    The existing CSV may have not been created yet, so we need to check if it exists.
    If it doesn't, we just write the input CSV to the existing file.
    """
    if not os.path.exists(existing_file):
        write_csv(existing_file, input_rows)
        return

    existing_rows = read_csv(existing_file)

    # Assuming the id column is the first one
    input_ids = {row[0] for row in input_rows}

    # Remove duplicates
    unique_existing_rows = [row for row in existing_rows if row[0] not in input_ids]

    # Prepend new rows
    final_rows = input_rows + unique_existing_rows

    # Write to existing file
    write_csv(existing_file, final_rows)


def update_sheet(sheet, file_name, columns):
    """
    This function gets the result CSV that was updated on the update_csv() func
    and then syncs it with the Google spreadsheet.
    """
    # Read the CSV file into a DataFrame
    df = pd.read_csv(file_name)

    df = df[columns]

    # Clear the sheet
    sheet.clear()

    # Update the sheet with the DataFrame
    set_with_dataframe(sheet, df)


# Generate the current date in YMD format
current_date = datetime.now().strftime("%Y%m%d")

update_csv(f"camara_{current_date}.csv", "camara.csv")
update_sheet(sheet_camara, "camara.csv", cols_camara)

update_csv(f"senado_{current_date}.csv", "senado.csv")
update_sheet(sheet_senado, "senado.csv", cols_senado)
